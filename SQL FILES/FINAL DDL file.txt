CREATE SCHEMA IF NOT EXISTS public;

CREATE TABLE IF NOT EXISTS members (
    email_id VARCHAR(100) UNIQUE PRIMARY KEY,
    password VARCHAR(20)   	
);

CREATE TABLE IF NOT EXISTS personal_info(
	email_id VARCHAR(100) PRIMARY KEY REFERENCES members(email_id), -- Foreign key referencing the main members table
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    date_of_birth DATE,
    address TEXT,
    phone_number VARCHAR(20),
	weight INT ,
	height INT
);

CREATE TABLE IF NOT EXISTS fitness_goals (
    goal_id SERIAL PRIMARY KEY,
    email_id VARCHAR(100) REFERENCES members(email_id), -- Foreign key referencing the members table
    goal_description TEXT,
    target_date DATE
);

CREATE TABLE IF NOT EXISTS trainers (
    trainer_id VARCHAR(20) UNIQUE PRIMARY KEY,
    password VARCHAR(20),
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20),
    dob DATE,
    address TEXT,
    specialization VARCHAR(100)
);

CREATE TABLE IF NOT EXISTS admin_staff (
    staff_id VARCHAR(20) PRIMARY KEY,
    password VARCHAR(20),
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20),
    date_of_birth DATE,
    address TEXT
);
CREATE TABLE IF NOT EXISTS rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(100)
    );

CREATE TABLE IF NOT EXISTS rooms_schedule (
    room_sched_id SERIAL PRIMARY KEY,
    room_id INT REFERENCES rooms(room_id) ,
    time_slot VARCHAR(20) CHECK (time_slot IN ('morning', 'afternoon', 'evening', 'night')), -- Set by admin staff for cleaning or emergency 
    status VARCHAR(20) CHECK (status IN ('available', 'booked', 'unavailable'))
);


CREATE TABLE IF NOT EXISTS equipments(
	equipment_id INT PRIMARY KEY,
    equipment_name VARCHAR(100),
    condition VARCHAR(20) CHECK (condition IN ('working', 'under maintenance'))
);

CREATE TABLE IF NOT EXISTS class_schedule(
	class_id SERIAL PRIMARY KEY,
    class_name VARCHAR(100),
    time_slot VARCHAR(20) CHECK (time_slot IN ('morning', 'afternoon', 'evening')),
    room_id INT REFERENCES rooms(room_id), -- Foreign key referencing the rooms table
    availability VARCHAR(20) CHECK (availability IN ('fully booked', 'available'))
);

CREATE TABLE IF NOT EXISTS trainers_schedule(
	schedule_id SERIAL PRIMARY KEY,
    trainer_id VARCHAR(20), -- Foreign key referencing the trainers table
    time_slot VARCHAR(20), -- e.g., 'morning', 'afternoon', 'evening', 'night'
    availability VARCHAR(20) CHECK (availability IN ('booked', 'unavailable', 'available'))
);

CREATE TABLE IF NOT EXISTS main_schedule (
	booking_id SERIAL PRIMARY KEY,
    email_id VARCHAR(100) REFERENCES members(email_id), -- Foreign key referencing the members table (used to get name of member)
    trainer_id VARCHAR(20) REFERENCES trainers(trainer_id), -- Foreign key referencing the trainers table
	room_id INT REFERENCES rooms(room_id) , -- Foreign key referencing the rooms table (used to get the name of a room for display)
    time_slot VARCHAR(20) CHECK (time_slot IN ('morning', 'afternoon', 'evening', 'night')) -- e.g. 
);

CREATE TABLE IF NOT EXISTS member_class_booking (
    booking_id SERIAL PRIMARY KEY,
    member_email VARCHAR(100) REFERENCES members(email_id),
    class_id INT REFERENCES class_schedule(class_id),
    booking_date DATE
);
